function solution(n) {
  //y+1,x+1,y-1,x-1,
  let triangle = Array.from(new Array(n), () => new Array(n).fill(0));
  let r = 0;
  let c = 0;
  let count = 1;
  const endCount = (n * (n + 1)) / 2;

  for (; r < n; r++) {
    triangle[r][c] = count;
    count++;
  }
  c++;
  r--;
  for (; c < n; c++) {
    triangle[r][c] = count;
    count++;
  }
  c -= 2;
  r--;

  for (; 0 < c; c--, r--) {
    triangle[r][c] = count;
    count++;
  }
  r += 2;
  c++;

  while (true) {
    if (count === endCount + 1) {
      answer = [];
      for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
          if (triangle[i][j] !== 0) {
            answer.push(triangle[i][j]);
          }
        }
      }
      return answer;
    }

    for (; r < n; r++) {
      if (triangle[r][c] !== 0 && triangle[r][c] > 0) {
        triangle[r][c] = count;
        count++;
      } else {
        c++;

        break;
      }
    }

    for (; c < n; c++) {
      if (triangle[r][c] !== 0 && triangle[r][c] > 0) {
        triangle[r][c] = count;
        count++;
      } else {
        r--, c--;

        break;
      }
    }

    for (; -1 < c; c--, r--) {
      if (triangle[r][c] !== 0 && triangle[r][c] > 0) {
        triangle[r][c] = count;
        count++;
      } else {
        r++, c++;

        break;
      }
    }
  }
}

console.log(solution(4));
